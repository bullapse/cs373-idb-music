collegedb.me is a very nicely designed website. the front end design and color scheme is very fitting for the website.
For the population of the page, it is very fluid and all rendered in the same page for each pillar and the pagination
seems to use dynamic loading using something like AngularJS. For the list pages, it seems like they just populate the
rows with data from each of the objects and might have been nicer to represent those fields with something other than
just raw data. For the details pages, the universities pages are well made and provide useful info, the maps API
integration is impressive too. The states details pages are fairly plain and the list of universities are a little
under represented on the page. The degrees details pages have the same problem, it's fairly plain and only lists universities
in an unmeaningful way. During the rendering of each page as well, the query for the universities seems to load all of them
at once and results in the list being populated noticeably later than everything else. For this, paging in the back end might
have been useful.

Looking at their website, it definitely looks like we should have spent more time on the front end of
our website. We also could have refined our page population to be dynamic since it feels much cleaner on their site.
Using AngularJS along with Flask would have made our site cleaner and functional based on their site.
Our details pages do seem a little more comprehensive and useful though.





For our website, we displayed the data that we collected in a creative and meaningful manner. Users can browse through
artists, albums, and tracks and see everything they need to on each of them. For tracks we even included previews of
the tracks. The progress bar for popularity is a good visual indicator that a user can quickly glance at and comprehend.
Our design for our website is a little mismatched though. We could have spent more effort on the front end and make
everything blend a little more. For our back-end, we set it up in a way that would make it future proof. For the data
retrieval for the front end, we had the pagination occur in the back end so that there would be no delay in populating
the front end which would really come into use for a very large amount of data but unfortunately we didn't populate our
database with that many objects. For our data models, we did a good job of creating associations between each class so that
links could be very easily found between objects

One thing we learned is to plan which frameworks and libraries to use ahead of time instead of trying to integrating
whatever we find when we need it. We had some problems trying to use certain libraries that wouldn't work with the ones
that we already had without in depth special configuration. We also learned that we need to communicate exactly what we
were working on to avoid duplicate work.
